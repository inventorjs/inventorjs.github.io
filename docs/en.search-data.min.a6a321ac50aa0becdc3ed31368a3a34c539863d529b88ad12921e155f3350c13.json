[{"id":0,"href":"/docs/inventor-cli/","title":"inventor-cli","section":"Docs","content":" @inventorjs/cli # 前端脚手架框架，采用插件架构设计，内置脚手架核心及其他常用插件，实现开箱即用，开发者可使用框架提供的脚手架插件快速开发插件。\n"},{"id":1,"href":"/docs/inventor-cli/core/plugin/","title":"Plugin[插件基础类]","section":"core[核心模块]","content":" 插件基础抽象类(Plugin) # 插件实例基础抽象类，封装常用的脚手架插件开发相关功能，插件需要继承该抽象类以实现插件功能(其中 abtract 方法和属性为子插件必须实现的)，插件实例通过脚手架框架内部自动创建，插件开发者无需手动初始化插件实例，插件实例和方法在子插件种皆可通过 this 获取。\nnew Plugin(params) # 插件构造函数为脚手架框架内部调用，插件开发者无需创建插件实例\nparams: entryPath: \u0026lt;string\u0026gt; 插件入口路径 this.entryPath # Type: \u0026lt;string\u0026gt; 插件入口路径 this.templatePath # Type: \u0026lt;string\u0026gt; 插件模版路径 this.actionPath # Type: \u0026lt;string\u0026gt; action 文件夹路径 this.prompt(questions) # 实现命令行可交互问答，对 inquirer 核心功能封装\nquestions: \u0026lt;Object[]\u0026gt; 问题数组 type: \u0026lt;checkbox|text\u0026gt; 问题类型 name: \u0026lt;string\u0026gt; 问题键名 message: \u0026lt;string\u0026gt; 问题描述 choices: \u0026lt;Object[]\u0026gt; 问题可选项 name: \u0026lt;string\u0026gt; 选项名称 value: \u0026lt;string\u0026gt; 选项值 this.install(options) # 在上下文目录执行 pnpm install 进行包安装\noptions: \u0026lt;Object\u0026gt; 调用选项 this.addDependencies(packageNames, options) # 在上下文目录批量添加依赖包\npackageNames: \u0026lt;string[]\u0026gt; 依赖包名称数组(如：axios@1.0.0) this.addDevDependencies(packageNames, options) # 在上下文目录批量添加开发依赖包\npackageNames: \u0026lt;string[]\u0026gt; 依赖包名称数组(如：axios@1.0.0) this.removeDependencies(packageNames, options) # 在上下文目录批量删除依赖包\npackageNames: \u0026lt;string[]\u0026gt; 依赖包名称数组(如：axios@1.0.0) this.removeDevDependencies(packageNames, options) # 在上下文目录批量删除开发依赖包\npackageNames: \u0026lt;string[]\u0026gt; 依赖包名称数组(如：axios@1.0.0) this.getPackageJson(fromPath = this.entryPath) # 从 fromPath 开始查找 package.json 文件直到根目录，并返回 json 对象\nfromPath: \u0026lt;string\u0026gt; 查找起始路径 this.addPackageJsonFields(fieldsData, filePath) # 向 package.json 添加字段\nfieldsData: \u0026lt;Object\u0026gt; 字段数据对象 filePath: \u0026lt;string\u0026gt; package.json 文件路径 this.savePackageJson(filePath, packageJson) # 保存 packageJson 对象到 package.json 文件\nfilePath: \u0026lt;string\u0026gt; package.json 文件路径 packageJson: \u0026lt;Object\u0026gt; packageJson 数据对象 this.getPackageName(fromPath = this.entryPath) # 获取指定路径的 npm 包名称\nfromPath: \u0026lt;string\u0026gt; 查找起始路径 this.getPluginName(frompath = this.entryPath) # 获取指定路径的 inventor-plugin 名称，即命令行执行名称\nfromPath: \u0026lt;string\u0026gt; 查找起始路径 this.confirmOverwrites(paths) # 询问是否覆盖指定路径的文件\npaths: \u0026lt;string[]\u0026gt; 文件路径列表 this.renderTemplate(templateName, destinationName, options) # 渲染指定模版文件夹到目标文件夹\ntemplateName: \u0026lt;string\u0026gt; 模版名称(即在 templates 的子文件夹名称) destinationName: \u0026lt;string\u0026gt; 目标文件夹名称 options: \u0026lt;Object\u0026gt; 模版渲染选项 data: \u0026lt;Object\u0026gt; 模版数据 overwrites: \u0026lt;Boolean\u0026gt; 是否覆盖已存在目标文件 this.renderTemplateFile(templateName, templateFile, destinationFile, options) # 渲染指定模版文件到目标文件\ntemplateName: \u0026lt;string\u0026gt; 模版名称(即在 templates 的子文件夹名称) templateFile: \u0026lt;string\u0026gt; 模版目录下的文件，相对模版路径 destinationFile: \u0026lt;string\u0026gt; 目标文件名称 options: \u0026lt;Object\u0026gt; 模版渲染选项 data: \u0026lt;Object\u0026gt; 模版数据 overwrites: \u0026lt;Boolean\u0026gt; 是否覆盖已存在目标文件 "},{"id":2,"href":"/docs/inventor-cli/cli/","title":"cli[脚手架入口]","section":"inventor-cli","content":" @inventorjs/cli 脚手架入口 # "},{"id":3,"href":"/docs/inventor-cli/core/modules/cmd/","title":"cmd[命令处理模块]","section":"modules[模块]","content":" 命令行程序调用模块 # 封装 execa 调用方法，提供对返回数据 buffer 进行处理的能力\nexec(bin, args, options) # 调用命令行程序\nbin: \u0026lt;string\u0026gt; 执行命令行程序 args: \u0026lt;string[]\u0026gt; 命令行程序参数 options: \u0026lt;Object\u0026gt; output: \u0026lt;Boolean\u0026gt; 是否输出运行结果 pipeline: \u0026lt;\u0026lsquo;stdout\u0026rsquo; | \u0026lsquo;stderr\u0026rsquo;\u0026gt; 输出文件描述符 pipe: \u0026lt;Function\u0026gt; buf: \u0026lt;Buffer\u0026gt; 处理命令输出的 buffer "},{"id":4,"href":"/docs/inventor-cli/core/","title":"core[核心模块]","section":"inventor-cli","content":" @inventorjs/core # "},{"id":5,"href":"/docs/inventor-cli/core/modules/env/","title":"env[环境管理模块]","section":"modules[模块]","content":" 环境管理模块 # 主要提供脚手架当前执行环境的一些相关信息，管理脚手架执行上下文\nisTTY() # 判断当前是否是标准终端环境，如在子进程中(pnpm exec -r), 则返回false\npwd() # 获取当前所在路径\nhomedir() # 获取当前用户家目录\ncontext() # 获取安装脚手架上下文(global|local)\nusername() # 获取当前用户名\nuid() # 获取当前用户 uid\ndirname(metaUrl) # 获取文件所在目录(主要用于转换 import.meta.url)\nmetaUrl: \u0026lt;string\u0026gt; 模块的 import.meta.url 值 filename(metaUrl) { # 获取文件绝对路径(主要用于转换 import.meta.url)\nmetaUrl: \u0026lt;string\u0026gt; 模块的 import.meta.url 值 changeCwd(enterCwd) # 改变当前命令执行上下文目录\nenterCwd: \u0026lt;string\u0026gt; 执行上下文目录 "},{"id":6,"href":"/docs/inventor-cli/core/modules/fs/","title":"fs[文件处理模块]","section":"modules[模块]","content":" 文件处理模块 # 导出 fs-extra 常用函数，并封装常用的文件操作功能\nfs-extra 导出 # readdir readFile writeFile stat getAllFiles(dirPath) # 获取目标路径下所有文件路径(深层次递归获取)\ndirPath: \u0026lt;string\u0026gt; 目标目录路径 getExistsTemplateFiles(templateDir, destinationDir) # 获取已存在目标文件的模版文件列表\ntemplateDir: \u0026lt;string\u0026gt; 模版目录路径 destinationDir: \u0026lt;string\u0026gt; 目标目录路径 exists(filePath) # 判断目标路径是否存在\nfilePath: \u0026lt;string\u0026gt; 目标路径 renderTemplate(templateDir, destinationDir, options) # 将模版文件夹所有文件渲染到目标文件夹\ntemplateDir: \u0026lt;string\u0026gt; 模版文件夹路径 destinationDir: \u0026lt;string\u0026gt; 目标文件夹路径 options: \u0026lt;Object\u0026gt; 模版渲染选项 data: \u0026lt;Object\u0026gt; 模版数据 renderTemplate(templateFile, destinationFile, options) # 渲染单个模版文件到目标路径\ntemplateFile: \u0026lt;string\u0026gt; 模版文件路径 destinationFile: \u0026lt;string\u0026gt; 目标文件路径 options: \u0026lt;Object\u0026gt; 模版渲染选项 data: \u0026lt;Object\u0026gt; 模版数据 "},{"id":7,"href":"/docs/inventor-cli/core/modules/git/","title":"git[git命令模块]","section":"modules[模块]","content":" git # "},{"id":8,"href":"/docs/inventor-cli/core/modules/log/","title":"log[日志模块]","section":"modules[模块]","content":" log # "},{"id":9,"href":"/docs/inventor-cli/core/modules/","title":"modules[模块]","section":"core[核心模块]","content":" 脚手架模块列表 # cmd: 命令行程序调用模块 env: 环境信息模块 fs: 文件操作模块 git: git 命令执行模块 log: 日志打印模块 pm: npm 包管理模块 rc: rc 配置文件管理模块 util: 通用工具模块 "},{"id":10,"href":"/docs/inventor-cli/plugin-app/","title":"plugin-app[应用插件]","section":"inventor-cli","content":" 脚手架内置应用管理插件 # "},{"id":11,"href":"/docs/inventor-cli/plugin-plugin/","title":"plugin-plugin[插件管理]","section":"inventor-cli","content":" 脚手架内置插件管理插件 # "},{"id":12,"href":"/docs/inventor-cli/core/modules/pm/","title":"pm[包管理模块]","section":"modules[模块]","content":" pm # "},{"id":13,"href":"/docs/inventor-cli/core/modules/rc/","title":"rc[配置文件模块]","section":"modules[模块]","content":" rc # "},{"id":14,"href":"/docs/inventor-cli/core/modules/util/","title":"util[通用工具模块]","section":"modules[模块]","content":" util # "}]